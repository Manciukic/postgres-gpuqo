UNION FIND
------------
1. BFS 
(a) kaneis assign edge weights 
(b) vreis leaves kai initialize to LeafPriorityQueue 
(c) gemiseis to EdgePriority me ola ta edges ( akoma kai auta twn leaves afou ginode handles argotera)
    Edw: left,right ta id twn nodw, leftsize, rightsize=1

! SOS, ta left_size, right_size DEN einai trusted gt borei na alla3e apo otan to ekana push sto EdgeQueue
! Ara: prepei me to pop() na kanw getSize(left), getSize(right) IF left/right in different unions
! An isxuei auto omws tote gamithikame
=> Boroume omws kathe fora pou ta kanoume pop() na elegxoume an to size ekei einai idio me to getSize()
=> An einai pame gia UNION, an den einai 3anakanoume push me ta nea sizes ( twra auto ti complexity exei den exw idea)
! Ara stin prwti periptwsh "meiwthike" kata ena edge i fasi kai stin deuteri apla kaname update to priorityqueue


2. 
DisjointSet ds = makeSet(GpuqoPlannerInfo<BitmapsetN>* info);
std::priority_queue<pair, std::vector<pair>, decltype(comparator)> queue;


while(average_union_size < (n\k - eps) or (!queue.empty()){

    UnionEdge edge = queue.top();
    queue.pop();
    # mono an einai se diaforetiko union sunexizoume alliws kado pop to edge kai 3exna to
    if (ds.Find(edge.left) != ds.Find(edge.right) ){
        if (  edge.total_size != ds.getSize(edge.left) + ds.getSize(edge.right)){
            edge.left = ds.getSize(edge.left);
            edge.right = ds.getSize(edge.right);
            edge.total_size = edge.left + edge.right;
            # push back sto priorityqueue me ta swsta sizes
            queue.push(edge); # kala borei na legetai alliws to push all okay
        }
        else{
            # edw kanw union pou 3erw oti ola ta stoixeia einai swsta, EINAI OMWS?
            union(edge.left, edge.right)
# MOU LEIPEI KATI EDW?
        }
    }
}
